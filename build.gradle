plugins {
    id 'java'
    id 'application'
    id "io.freefair.lombok" version "8.4"
    id 'com.diffplug.spotless' version '6.13.0'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    //id 'org.sonarqube' version '4.4.1.3373'
}

spotless {
    java {
        googleJavaFormat()
        removeUnusedImports()
    }
}

group = 'com.onehouse'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.inject:guice:5.0.1'
    implementation "ch.qos.logback:logback-classic:1.2.6"
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.15.3'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'commons-cli:commons-cli:1.6.0'


    implementation platform('software.amazon.awssdk:bom:2.21.8')
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:sso'
    implementation 'software.amazon.awssdk:sts'
    implementation 'com.google.cloud:google-cloud-storage:2.12.0'

    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation "org.mockito:mockito-junit-jupiter:3.11.2"
    testImplementation "org.mockito:mockito-inline:3.11.2"
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    testImplementation(platform('org.junit:junit-bom:5.10.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')

    implementation("org.apache.spark:spark-core_2.12:3.2.2") {
        transitive = false
    }
    implementation("org.apache.spark:spark-sql_2.12:3.2.2")
    //implementation group: 'org.apache.spark', name: 'spark-avro_2.12', version: "3.2.2"
}

application {
    mainClassName = 'com.onehouse.Main'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task sourceJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

// Configure Shadow plugin
tasks.shadowJar {
    setProperty("zip64", true)

    // other shadow jar config
}

build.dependsOn sourceJar