plugins {
    id 'java'
    id "io.freefair.lombok" version "8.4"
    id 'com.diffplug.spotless' version '6.13.0'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'signing'
}

spotless {
    java {
        googleJavaFormat()
        removeUnusedImports()
    }
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8" //jacoco version
}

tasks.register('jacocoMergedReport', JacocoReport) {
    for (subproject in subprojects) {
        dependsOn subproject.test
        sourceSets subproject.sourceSets.test
        if (subproject.sourceSets.test.allSource.files.isEmpty()) {
            logger.info '{} has no tests', subproject.name
        } else {
            logger.info 'aggregating tests from {}', subproject.name
            executionData subproject.test
        }
    }
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.register('jacocoRootReport', JacocoReport) {

    description = 'Generates an aggregate report from all subprojects'
    dependsOn subprojects.test, jacocoMergedReport

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.required = true // human readable
        xml.required = true // required by sonarqube
    }
}

sonar {
    properties {
        property "sonar.gradle.skipCompile", true
        property "sonar.projectKey", "onehouseinc_hudi-metadata-extractor"
        property "sonar.organization", "onehouseinc"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.scm.provider", "git"
        property "sonar.token", project.getProperty("sonar_token")
        if (project.hasProperty("pullrequest_key")) {
            property "sonar.pullrequest.key", project.getProperty("pullrequest_key")
            property "sonar.pullrequest.branch", project.getProperty("pullrequest_branch")
            property "sonar.pullrequest.base", project.getProperty("pullrequest_base")
            property "sonar.pullrequest.github.repository", "https://github.com/onehouseinc/LakeView"
        } else {
            property "sonar.branch.name", project.getProperty("branch_name")
        }
        property "sonar.verbose", "true"
        property 'sonar.coverage.exclusions', ['**/constants/**/*', '**/models/**/*']
    }
}

tasks.sonar {
    group = 'Sonarqube coverage reports'
    description = 'Uploads the aggregated coverage report to sonarcloud'

    onlyIf { System.env.'GITHUB_ACTIONS' }
}

tasks.getByPath('sonar').setDependsOn([])
tasks.getByPath('sonar').setMustRunAfter([])

group = 'ai.onehouse'
version = project.hasProperty('version') ? project.version : '1.0-SNAPSHOT'

ext {
    versions = [
            hudi: '0.15.0',
            okhttp: '4.11.0',
            mockito: '3.11.2'
    ]
}

repositories {
    mavenCentral()
}

dependencies {
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: "maven-publish"

    compileJava {
        options.compilerArgs << '-Xlint:unchecked'
        options.compilerArgs << '-Xlint:-deprecation'
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    // other shadow jar config
    tasks.register('sourceJar', Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourceJar
    }

    build.dependsOn sourceJar

    publishing {
        repositories {
            maven {
                url = layout.buildDirectory.dir('staging-deploy')
            }
        }

        publications {
            mavenJava(MavenPublication) {
                groupId 'ai.onehouse'
                artifactId project.name
                version = project.version

                from components.java

                pom {
                    name.set("LakeView")
                    description.set("LakeView is a free product provided by Onehouse for the Apache Hudi community. LakeView exposes an interactive interface with pre-built metrics, charts, and alerts to help you monitor, optimize, and debug your data lakehouse tables.")
                    url.set("https://www.onehouse.ai/product/lakeview")
                    licenses {
                        license {
                            name.set("Apache-2.0")
                            distribution.set("repo")
                            url.set("https://github.com/onehouseinc/LakeView/blob/main/LICENSE.txt")
                        }
                    }

                    scm {
                        connection.set("scm:git:ssh://github.com/onehouseinc/LakeView.git")
                        developerConnection.set("scm:git:ssh://github.com/onehouseinc/LakeView.git")
                        url.set("https://github.com/onehouseinc/LakeView")
                    }

                    developers {
                        developer {
                            id = 'pkgajulapalli'
                            name = 'Praveen Gajulapalli'
                            email = 'praveeng@onehouse.ai'
                        }
                    }
                }
            }
        }
    }

    generateMetadataFileForMavenJavaPublication.dependsOn sourceJar
    generateMetadataFileForMavenJavaPublication.dependsOn javadocJar

    signing {
        // Automatically sign all publications
        useInMemoryPgpKeys(System.getenv("GPG_KEY_ID"), System.getenv("GPG_SECRET_KEY"), System.getenv("GPG_PASSPHRASE"))
        sign publishing.publications.mavenJava
    }
}

// Configure Shadow plugin
configure([project(':lakeview'), project(':lakeview-glue'), project(':lakeview-sync-tool')]) {
    apply plugin: 'com.github.johnrengelman.shadow'

    shadowJar {
        setProperty("zip64", true)
    }
}
